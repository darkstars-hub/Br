//!-----------------------------------------------------
//! @file : Component.h
//! @brief : Actorが持つ機能の基底クラス
//! @date : 2020/05/28
//!-----------------------------------------------------


#ifndef BR_COMPONENT_H
#define BR_COMPONENT_H


#include "Actor.h"


namespace br {
class Component {
    friend br::Actor;
private:
protected:
    //! この機能の所有者
    br::Actor* _owner;
    //! 小さいほど処理される順番が早い
    int _priority;
    //! この機能の種類
    ComponentType _type;
public:
    //!-----------------------------------------------------
    //! @brief : コンストラクタ
    //! @param : [in](br::Actor* owner) この機能の所有者
    //! @param : [in](int priority) 処理優先順位 0に近いほど高い
    //! @return : none
    //!-----------------------------------------------------
    Component(br::Actor* owner, int priority = 0);
    //!-----------------------------------------------------
    //! @brief : デストラクタ
    //! @param : [in](void) none
    //! @return : none
    //!-----------------------------------------------------
    virtual ~Component();

    //!-----------------------------------------------------
    //! @brief : セッター
    //! @param : [in](br::Actor* ptr) 所有者のポインタ
    //! @return : none
    //!-----------------------------------------------------
    void SetOwner(br::Actor* ptr);
    //!-----------------------------------------------------
    //! @brief : ゲッター
    //! @param : [in](void) none
    //! @return : 所有者のポインタ
    //!-----------------------------------------------------
    br::Actor* GetOwner(void) const;
    //!-----------------------------------------------------
    //! @brief : ゲッター
    //! @param : [in](void) none
    //! @return : この機能の処理優先度を返す
    //!-----------------------------------------------------
    virtual int GetPriority(void) const;
    //!-----------------------------------------------------
    //! @brief : ゲッター
    //! @param : [in](void) none
    //! @return : この機能の種類を返す
    //!-----------------------------------------------------
    virtual br::ComponentType GetType(void) const;
    //!-----------------------------------------------------
    //! @brief : 更新するかどうか
    //! @param : [in](void) none
    //! @return : する場合true
    //!-----------------------------------------------------
    virtual bool IsUpdate(void);
    //!-----------------------------------------------------
    //! @brief : 描画するかどうか
    //! @param : [in](void) none
    //! @return : する場合true
    //!-----------------------------------------------------
    virtual bool IsRender(void);

    //!-----------------------------------------------------
    //! @brief : 入力処理
    //! @param : [in](void) none
    //! @return : 成功した場合true
    //!-----------------------------------------------------
    virtual bool Input(void);
    //!-----------------------------------------------------
    //! @brief : 初期化
    //! @param : [in](void) none
    //! @return : 成功した場合true
    //!-----------------------------------------------------
    virtual bool Initialize(void);
    //!-----------------------------------------------------
    //! @brief : 更新
    //! @param : [in](void) none
    //! @return : 成功した場合true
    //!-----------------------------------------------------
    virtual bool Update(void) = 0;
    //!-----------------------------------------------------
    //! @brief : 描画
    //! @param : [in](Mof::CVector2 scroll) スクロール値
    //! @return : 成功した場合true
    //!-----------------------------------------------------
    virtual bool Render(Mof::CVector2 scroll) = 0;
    //!-----------------------------------------------------
    //! @brief : 解放
    //! @param : [in](void) none
    //! @return : 成功した場合true
    //!-----------------------------------------------------
    virtual bool Release(void);
    //!-----------------------------------------------------
    //! @brief : 同じ参照でパラメーターの重複してほしくない物は
    //!          継承先でnewでディープコピーを実施
    //! @param : [in](void) none
    //! @return : コンポーネントのクローン
    //!           継承が無ければ自身を返す
    //!-----------------------------------------------------
    virtual br::Component* Clone(void) = 0;
};
}
#endif // !BR_COMPONENT_H